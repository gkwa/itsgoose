-- main-step1.go.txt --
package main

type Mymod struct {}

const defaultNodeVersion = "16"

func (m *Mymod) buildBase(nodeVersion Optional[string]) *Node {
  return dag.Node().
    WithVersion(nodeVersion.GetOr(defaultNodeVersion)).
    WithNpm().
    WithSource(dag.Host().Directory(".", HostDirectoryOpts{
      Exclude: []string{".git", "**/node_modules"},
    })).
    Install(nil)
}

-- main-step2.go.txt --
package main

import (
	"context"
)

type Mymod struct{}

const defaultNodeVersion = "21"

func (m *Mymod) buildBase(nodeVersion Optional[string]) *Node {
	return dag.Node().
		WithVersion(nodeVersion.GetOr(defaultNodeVersion)).
		WithNpm().
		WithSource(dag.Host().Directory(".", HostDirectoryOpts{
			Exclude: []string{
				".git",
				"**/node_modules",
			},
		})).
		Install(nil)
}

func (m *Mymod) Test(ctx context.Context, nodeVersion Optional[string]) (string, error) {
	return m.buildBase(nodeVersion).
		Run([]string{"test", "--", "--watchAll=false"}).
		Stderr(ctx)
}

-- main-step3.go.txt --
package main

import (
	"context"
)

type Mymod struct{}

const defaultNodeVersion = "21"

func (m *Mymod) buildBase(nodeVersion Optional[string]) *Node {
	return dag.Node().
		WithVersion(nodeVersion.GetOr(defaultNodeVersion)).
		WithNpm().
		WithSource(dag.Host().Directory(".", HostDirectoryOpts{
			Exclude: []string{
				".git",
				"**/node_modules",
			},
		})).
		Install(nil)
}

func (m *Mymod) Test(ctx context.Context, nodeVersion Optional[string]) (string, error) {
	return m.buildBase(nodeVersion).
		Run([]string{"test", "--", "--watchAll=false"}).
		Stderr(ctx)
}

func (m *Mymod) Build(nodeVersion Optional[string]) *Directory {
  return m.buildBase(nodeVersion).Build().Container().Directory("./build")
}

-- e2e.sh --
#!/usr/bin/env bash

set -e

dagger mod init --name=mymod --sdk=go
git init
git add -A
git commit -am Boilerplate

dagger mod install github.com/quartz-technology/daggerverse/node@9ce087b83aa8b85f828d7d92ce39bd7c055cfc0f

cp main-step1.go.txt main.go
dagger functions

cp main-step2.go.txt main.go
dagger functions

cp main-step3.go.txt main.go
dagger functions
dagger call build
